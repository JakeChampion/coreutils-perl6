#!/usr/bin/env perl6
my %*SUB-MAIN-OPTS =
	:named-anywhere;

sub tab-print ($term) {
	print("\t{$term}");
}

my &wc = {
	l => .lines.elems,
	w => .words.elems,
	c => .encode.bytes,
	m => .codes,
	r => .chars
}

sub complain ($file, $complaint) {
	$*ERR.put: "$*PROGRAM-NAME: $file: $complaint";
}

sub check-goodness ($file) {
	given $file {
		when !*.e {
			complain($file, ｢No such file or directory｣);
			False
		}
		when .d {
			complain($file, ｢Is a directory｣);
			False
		}
		when !*.r {
			complain($file, ｢Permission denied｣);
			False
		}
		default {
			True
		}
	}
}

sub print-line (:$options!, :%counts!, :$name) {
	for $options.comb -> $key {
		my $count = %counts<<$key>>;

		if ($count ~~ Int && $options.elems == 1) {
			print($count) if $count;
		} else {
			tab-print($count) if $count;
		}
	}

	if $name {
		tab-print $name
	};

	put();
}

sub MAIN (
	*@files,
	Bool :$l, #= lines
	Bool :$w, #= words
	Bool :$c, #= bytes
	Bool :$m, #= codepoints
	Bool :$r, #= runes
) {
	my $flag-count = [+] [?$l, ?$w, ?$c, ?$m, ?$r];
	my $use-defaults = !?$flag-count;
	my $options = [
		:l($l || $use-defaults),
		:w($w || $use-defaults),
		:c($c || $use-defaults),
		:m($m),
		:r($r)
	].grep(*.value).map(*.key);

	my %totals;

	@files = @files.map(*.IO);

	if (@files) {
		for @files -> $file {
			next unless check-goodness($file);

			my %counts = wc(slurp($file));

			for %counts.kv -> $key, $value {
				%totals<<$key>> += $value;
			}

			print-line(
				:counts(%counts),
				:options($options),
				:name($file.Str)
			)
		}

		if (@files.elems > 1) {
			print-line(
				:counts(%totals),
				:options($options),
				:name(｢total｣)
			)
		}
	} else {
		my %counts = wc(slurp);

		print-line(
			:counts(%counts),
			:options($options)
		)
	}
}

sub USAGE {
	put qq｢$*PROGRAM-NAME - print line, word, and byte counts for each file\n｣;
	put ｢the options may be used to select counts to print｣;
	put ｢always in this order: lines, words, bytes, codepoints, runes.｣ ~ "\n";
	put $*USAGE;
}
